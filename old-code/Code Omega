import numpy as np
from scipy.optimize import leastsq
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.widgets import CheckButtons, RadioButtons
import math


def func(x, a, c, d):
    return a * np.sin((x + c) / 180.0 * 2 * math.pi) + d


def residuals(params, x, y):
    return y - func(x, *params)


def load_data(filename, sensor):
    data_file = open(filename, "r")
    lines = data_file.readlines()
    data_file.close()

    datasets = []
    i = 0
    while i < len(lines):
        if "switching colors" in lines[i]:
            i += 1
        # elif "Starting TEST" or "Starting new cycle" in lines[i]:
        # returnfor
        else:
            data = []
            while i < len(lines) and "switching colors" not in lines[i]:
                line = lines[i].strip()
                if "," in line:
                    data.append(list(map(float, line.split(",")))[0:3])
                i += 1
            data = np.array(data)
            xdata = data[:, 0]
            ydata = data[:, sensor]
            # for j in range(len(xdata)):
            #   n = int(xdata[j] / 360)
            #  xdata[j] -= n * 360
            xdata, ydata = zip(*sorted(zip(xdata, ydata)))
            datasets.append((xdata, ydata))
    return datasets


def fit_dataset(dataset, p0, fits):
    xdata, ydata = dataset
    params, _ = leastsq(residuals, p0, args=(xdata, ydata))
    res = residuals(params, xdata, ydata)
    rms = np.sqrt(np.mean(res**2))
    print(f"Dataset {len(fits) + 1} parameters: {params}, RMS error: {rms}")
    return params, func(xdata, *params), res, ydata


def plot_datasets(datasets, fits, residuals, ydata_list, params, ax1, ax2):
    colors = ["r", "g", "b"]
    lines = []
    for i, dataset in enumerate(datasets):
        xdata, ydata = dataset
        # line, = ax1.plot(xdata, ydata_list[i], colors[i % len(colors)] + "o", label=f"Dataset {i + 1} Data")
        line = ax1.scatter(
            xdata,
            ydata_list[i],
            c=colors[i % len(colors)],
            marker="o",
            s=10,
            label=f"Dataset {i + 1} Data",
        )
        lines.append(line)
        (line,) = ax1.plot(
            xdata, fits[i], colors[i % len(colors)] + "-", label=f"Dataset {i + 1} Fit"
        )
        lines.append(line)
        (line,) = ax1.plot(
            xdata,
            func(xdata, *params[i]),
            colors[i % len(colors)] + "--",
            label=f"Dataset {i + 1} Function",
        )
        lines.append(line)
        (line,) = ax2.plot(
            xdata,
            residuals[i],
            colors[i % len(colors)] + "o",
            label=f"Dataset {i + 1} Residuals",
        )
        lines.append(line)
    ax1.axhline(y=0, color="black", linestyle="-")
    ax1.legend()
    ax2.axhline(y=0, color="black", linestyle="-")
    # ax2.set_xlim([2200, 2800])
    # ax2.set_ylim([-250, 250])
    ax1.set_ylabel("Lux")
    ax2.set_xlabel("Rotation in Grad")
    ax2.set_ylabel("Residuen")
    return lines


def update_plot(label, fig, lines, labels):
    index = labels.index(label)
    lines[index * 4].set_visible(not lines[index * 4].get_visible())
    lines[index * 4 + 1].set_visible(not lines[index * 4 + 1].get_visible())
    lines[index * 4 + 2].set_visible(not lines[index * 4 + 2].get_visible())
    lines[index * 4 + 3].set_visible(not lines[index * 4 + 3].get_visible())
    fig.canvas.draw()


def update_sensor(index, sensor_labels, lines, ax, radio="Visual Sensor"):
    data = lines[index].get_ydata()
    ydata = data[:, 1]
    if sensor_labels[index] == "IR Sensor":
        ydata = np.ones_like(ydata) * 2
    elif sensor_labels[index] == "Visual Sensor":
        ax.clear()
        return

    lines[index].set_ydata(ydata)
    ax.relim()
    ax.autoscale_view(True, True, True)
    ax.figure.canvas.draw_idle()

    if radio is not None:
        radio.set_active(sensor_labels.index(radio))


def main(filenames, p0, sensor):
    for i, filename in enumerate(filenames):
        datasets = load_data(filename, sensor)
        fits = []
        params_list = []
        residuals_list = []
        ydata_list = []
        for dataset in datasets:
            params, fit, res, ydata = fit_dataset(dataset, p0, fits)
            params_list.append(params)
            fits.append(fit)
            residuals_list.append(res)
            ydata_list.append(ydata)

        fig, (ax1, ax2) = plt.subplots(
            nrows=2,
            figsize=(8, 8),
            gridspec_kw={"height_ratios": [3, 1]},
            sharex=True,
            constrained_layout=False,
        )

        lines = plot_datasets(
            datasets, fits, residuals_list, ydata_list, params_list, ax1, ax2
        )

        # Set the initial states of the buttons
        initial_visibility = [line.get_visible() for line in lines]
        initial_sensor = []
        labels = ["Red", "Green", "Blue"]

        # Set the position of the checkbox to the right of the plot
        rax = fig.add_axes([0.9, 0.5, 0.1, 0.1])
        check = CheckButtons(rax, labels=labels, actives=initial_visibility)

        for label in check.labels:
            label.set_picker(True)
        check.on_clicked(
            lambda label: update_plot(label, fig, lines, labels)
        )  # add update_plot as a function to call when checkbox is clicked

        # Set the title of the figure
        fig.suptitle(f"Figure {i+1}: {filename}")

        plt.show(block=True)  # Show the figure and continue executing the program


# Initial guess for the parameters
p0 = [7000, 6, 2000]

# Files being analyzed
filenames = ["27.txt"]
sensor = 1

main(filenames, p0, sensor)
