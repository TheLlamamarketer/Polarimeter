import numpy as np
from scipy.optimize import leastsq
import matplotlib.pyplot as plt
from matplotlib.widgets import CheckButtons, RadioButtons
import math
from scipy.signal import argrelextrema


def func(x, a, c, d, a1, a2, a3, a4, a5, a6, a7, o1, o2, o3, o4, o5, o6, o7):
    return (
        a * np.sin((x + c) / 180.0 * 2 * math.pi)
        + d
        + a1 * np.sin((x + o1) / 66.5546 * 2 * math.pi)
        + a2 * np.sin((x + o2) / 255.50617 * 2 * math.pi)
        + a3 * np.sin((x + o3) / 360.17965 * 2 * math.pi)
        + a4 * np.sin((x + o4) / 120.01067 * 2 * math.pi)
        + a5 * np.sin((x + o5) / 43.75763 * 2 * math.pi)
        + a6 * np.sin((x + o6) / 89.98935 * 2 * math.pi)
        + a7 * np.sin((x + o7) / 72.0235 * 2 * math.pi)
    )


def func2(
    x,
    a,
    c,
    d,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    o1,
    o2,
    o3,
    o4,
    o5,
    o6,
    o7,
    p1,
    p2,
    p3,
    p4,
    p5,
    p6,
    p7,
):
    return (
        a * np.sin((x + c) / 180.0 * 2 * math.pi)
        + d
        + a1 * np.sin((x + o1) / p1 * 2 * math.pi)
        + a2 * np.sin((x + o2) / p2 * 2 * math.pi)
        + a3 * np.sin((x + o3) / p3 * 2 * math.pi)
        + a4 * np.sin((x + o4) / p4 * 2 * math.pi)
        + a5 * np.sin((x + o5) / p5 * 2 * math.pi)
        + a6 * np.sin((x + o6) / p6 * 2 * math.pi)
        + a7 * np.sin((x + o7) / p7 * 2 * math.pi)
    )


def residuals(params, x, y):
    return y - func2(x, *params)


def load_data(filename, sensor):
    data_file = open(filename, "r")
    lines = data_file.readlines()
    data_file.close()

    datasets = []
    i = 0
    while i < len(lines):
        if "switching colors" in lines[i]:
            i += 1
        # elif "Starting TEST" or "Starting new cycle" in lines[i]:
        # return
        else:
            data = []
            while i < len(lines) and "switching colors" not in lines[i]:
                line = lines[i].strip()
                if "," in line:
                    data.append(list(map(float, line.split(",")))[0:3])
                i += 1
            data = np.array(data)
            xdata = data[:, 0]
            ydata = data[:, sensor]
            # for j in range(len(xdata)):
            #   n = int(xdata[j] / 360)
            #  xdata[j] -= n * 360
            xdata, ydata = zip(*sorted(zip(xdata, ydata)))
            datasets.append((xdata, ydata))
    return datasets


def weight_func2(x, y):
    # Example weight function that gives higher weight to values around the minimums
    y = np.asarray(y)
    local_minima = argrelextrema(y, np.less)[0]
    weights = np.ones_like(y)
    for min_idx in local_minima:
        # Define a window around each minimum
        window = np.logical_and(x >= x[min_idx] - 10, x <= x[min_idx] + 10)
        weights[window] *= 2
    return weights


def fit_dataset(dataset, p0, fits):
    xdata, ydata = dataset
    params, _ = leastsq(residuals, p0, args=(xdata, ydata))
    res = residuals(params, xdata, ydata)
    rms = np.sqrt(np.mean(res**2))
    print(f"Dataset {len(fits) + 1} parameters: {params}, RMS error: {rms}")
    return params, func2(xdata, *params), res, ydata


def plot_datasets(datasets, fits, residuals, ydata_list, params):
    colors = ["r", "g", "b"]
    lines = []
    for i, dataset in enumerate(datasets):
        xdata, ydata = dataset
        (line,) = plt.plot(
            xdata,
            ydata_list[i],
            colors[i % len(colors)] + "o",
            label=f"Dataset {i + 1} Data",
        )
        lines.append(line)
        (line,) = plt.plot(
            xdata, fits[i], colors[i % len(colors)] + "-", label=f"Dataset {i + 1} Fit"
        )
        lines.append(line)
        (line,) = plt.plot(
            xdata,
            func2(xdata, *params[i]),
            colors[i % len(colors)] + "--",
            label=f"Dataset {i + 1} function",
        )
        lines.append(line)
        (line,) = plt.plot(
            xdata,
            residuals[i],
            colors[i % len(colors)] + "o",
            label=f"Dataset {i + 1} Residuals",
        )
        lines.append(line)
    plt.axhline(y=0, color="black", linestyle="-")
    plt.legend()
    return lines


def update_plot(label, fig, lines, labels):
    index = labels.index(label)
    ax = fig.axes[0]
    lines = ax.lines
    lines[index * 4].set_visible(not lines[index * 4].get_visible())  # data
    lines[index * 4 + 1].set_visible(not lines[index * 4 + 1].get_visible())  # fit
    lines[index * 4 + 2].set_visible(not lines[index * 4 + 2].get_visible())  # function
    lines[index * 4 + 3].set_visible(
        not lines[index * 4 + 3].get_visible()
    )  # residuals
    fig.canvas.draw()


def update_sensor(index, sensor_labels, lines, ax, radio="Visual Sensor"):
    data = lines[index].get_ydata()
    ydata = data[:, 1]
    if sensor_labels[index] == "IR Sensor":
        ydata = np.ones_like(ydata) * 2
    elif sensor_labels[index] == "Visual Sensor":
        ax.clear()
        return

    lines[index].set_ydata(ydata)
    ax.relim()
    ax.autoscale_view(True, True, True)
    ax.figure.canvas.draw_idle()

    if radio is not None:
        radio.set_active(sensor_labels.index(radio))


def main(filenames, p0, sensor):
    for i, filename in enumerate(filenames):
        datasets = load_data(filename, sensor)
        fits = []
        params_list = []
        residuals_list = []
        ydata_list = []
        for dataset in datasets:
            params, fit, res, ydata = fit_dataset(dataset, p0, fits)
            params_list.append(params)
            fits.append(fit)
            residuals_list.append(res)
            ydata_list.append(ydata)

        fig, ax = plt.subplots()

        labels = ["Red", "Green", "Blue"]
        sensor_labels = ["Visual Sensor", "IR Sensor"]
        lines = plot_datasets(datasets, fits, residuals_list, ydata_list, params_list)

        # Set the initial states of the buttons
        initial_visibility = [line.get_visible() for line in lines]
        initial_sensor = []

        # Set the position of the checkbox to the right of the plot
        rax = fig.add_axes([0.9, 0.5, 0.1, 0.1])
        check = CheckButtons(rax, labels=labels, actives=initial_visibility)

        for label in check.labels:
            label.set_picker(True)
        check.on_clicked(
            lambda label: update_plot(label, fig, lines, labels)
        )  # add update_plot as a function to call when checkbox is clicked

        # Set the title of the figure
        fig.suptitle(f"Figure {i+1}: {filename}")

        plt.show(block=True)  # Show the figure and continue executing the program


# Initial guess for the parameters
p0 = [
    7000,
    6,
    5000,
    160,
    160,
    50,
    24,
    24,
    20,
    8,
    0,
    -40,
    -400,
    -20,
    20,
    8,
    12,
    66.55466,
    255.50617,
    360.17965,
    120.01067,
    43.75763,
    89.98935,
    72.0235,
]
# Files being analyzed
filenames = ["18a.txt", "20a.txt"]
sensor = 1

main(filenames, p0, sensor)
