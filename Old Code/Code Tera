from __future__ import division
import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import math
import tkinter as tk
from tkinter import scrolledtext, IntVar
from matplotlib.widgets import RadioButtons
import mplcursors


def func(x, d, A, B, C):
    sum = d
    if np.isscalar(A):
        sum += A * np.sin((x + B) / C * 2 * math.pi)
    else:
        for i in range(len(A)):
            sum += A[i] * np.sin((x + B[i]) / C[i] * 2 * math.pi)
    return sum


def residuals(d, A, B, C, x, y):
    return y - func(x, d, A, B, C)


def fit_dataset0(xdata, ydata):
    p0 = [2000, 2000, 80]

    def fixed_func(x, *args):
        d, A0, B0 = args[0], args[1], args[2]
        A = np.array([A0])
        B = np.array([B0])
        C = np.array([180])
        return func(x, d, A, B, C)

    params, _ = curve_fit(fixed_func, xdata, ydata, p0=p0, maxfev=10000000)
    d, A, B, C = params[0], params[1], params[2], np.array(180)
    res = residuals(d, A, B, C, xdata, ydata)
    return d, A, B, C, res


def fit_dataset1(xdata, res, A0, B0, C0):
    def fixed_func(x, *args):
        A, B = args[: len(A0)], args[len(A0) : 2 * len(A0)]
        return func(x, 0, A, B, C0)

    p0 = np.concatenate((A0, B0))
    params, _ = curve_fit(fixed_func, xdata, res, p0=p0, maxfev=10000000)
    A1, B1 = params[: len(params) // 2], params[len(params) // 2 :]
    return A1, B1


def fit_dataset2(xdata, res, A1, B1, C0):
    def fixed_func(x, *args):
        A, B, C = (
            args[: len(A1)],
            args[len(A1) : 2 * len(A1)],
            args[2 * len(A1) : 3 * len(A1)],
        )
        return func(x, 0, A, B, C)

    p0 = np.concatenate((A1, B1, C0))
    params, _ = curve_fit(fixed_func, xdata, res, p0=p0, maxfev=10000000)
    A2, B2, C2 = (
        params[: len(params) // 3],
        params[len(params) // 3 : 2 * len(params) // 3],
        params[2 * len(params) // 3 :],
    )
    return A2, B2, C2


def fit_dataset3(xdata, ydata, A2, B2, C2, d, A0, B0, C0):
    Au = np.insert(A2, 0, A0)
    Bu = np.insert(B2, 0, B0)
    # Cu = np.concatenate((C0, C2))
    p0 = np.concatenate((Au, Bu, C2))
    p0 = np.insert(p0, 0, d)

    def fixed_func(x, *args):
        d = args[0]
        A = args[1 : len(args) // 3 + 1]
        B = args[len(args) // 3 + 1 : 2 * len(args) // 3 + 1]
        C = args[2 * len(args) // 3 + 1 :]
        C = np.insert(C, 0, C0)

        return func(x, d, A, B, C)

    params, pcov = curve_fit(fixed_func, xdata, ydata, p0=p0, maxfev=10000000)
    d3, A3, B3, C3 = (
        params[0],
        params[1 : len(params) // 3 + 1],
        params[len(params) // 3 + 1 : 2 * len(params) // 3 + 1],
        params[2 * len(params) // 3 + 1 :],
    )
    C3 = np.insert(C3, 0, C0)

    res = residuals(d3, A3, B3, C3, xdata, ydata)
    rms = np.sqrt(np.mean(res**2))

    # Calculate parameter uncertainties from the covariance matrix
    param_errors = np.sqrt(np.diag(pcov))

    return (
        d3,
        A3,
        B3,
        C3,
        func(xdata, d3, A3, B3, C3),
        param_errors,
        res,
        rms,
    )


def load_data(filename):
    with open(filename, "r") as data_file:
        lines = data_file.readlines()

    dataset = []
    data = []

    for line in lines:
        line = line.strip()
        if "," in line:
            row = list(map(float, line.split(",")))
            data.append(row)

    data = np.array(data)
    xdata = data[:, 1]
    ydata = data[:, 2:]

    xdata %= 360  # Ensure xdata stays within 360° range

    sorted_indices = np.argsort(xdata)
    xdata = xdata[sorted_indices]
    ydata = ydata[sorted_indices]

    dataset.append((xdata, ydata))  # Convert ydata to a NumPy array
    return dataset


def plot_power_spectrum(xdata, ydata, res, colors, filename):
    fig, axes = plt.subplots(3, 1, figsize=(10, 8), sharex=True, sharey=True)

    max_amplitude = np.max(np.sqrt(np.absolute(res)))  # Compute the maximum amplitude
    radio_button = RadioButtons(
        ax=plt.axes([0, 0.05, 0.06, 0.05]), labels=["Period", "Frequency"], active=1
    )
    lines = []

    for i, (color, ax) in enumerate(zip(colors, axes)):
        y = res[i]  # Select the column for the current color
        N = len(xdata)

        yf = np.fft.fft(y - np.mean(y))  # Compute the FFT
        amplitude = 2 * np.abs(yf) / N  # Compute the amplitude

        dt = np.mean(np.diff(xdata))  # Time step
        fs = 1 / dt  # Sampling frequency

        freq = np.fft.fftfreq(N, d=1 / fs)[: N // 2]  # Construct frequency axis

        per = np.where(freq != 0, 1 / freq, np.inf)

        (line,) = ax.plot(
            freq, amplitude[: N // 2], c=color, label=f"{color}"
        )  # Plot spectrum vs frequency
        ax.set_ylabel("Amplitude")
        ax.set_xlabel("Frequency")
        ax.legend([color])
        ax.grid(True)

        if len(freq) > 1:
            ax.set_xlim(0, np.max(freq[1:]))
        ax.set_ylim(0, max_amplitude)

        lines.append(line)

    def update_axis(label):
        d = {"Period": per, "Frequency": freq}

        for ax, line in zip(axes, lines):
            data = d[label]
            line.set_xdata(data)

            if label == "Period":
                ax.set_xlabel("Period")
                ax.set_xlim(0, np.max(data[1:]))
            elif label == "Frequency":
                ax.set_xlabel("Frequency")
                ax.set_xlim(0, np.max(data[1:]))

        plt.setp(ax.get_xticklabels(), visible=False)

        plt.draw()

    radio_button.on_clicked(update_axis)

    # Enable point selection
    # mplcursors.cursor(hover=True)

    plt.tight_layout(rect=[0, 0, 1, 0.96])
    plt.show(block=True)


class PlotHandles:
    def __init__(self):
        self.handles = []  # List to store plot handles


def toggle_color(color, handles):
    plot_handles = handles.handles

    rgb_color = mcolors.to_rgb(color)

    for scatter, line, scatter_res in plot_handles:
        scatter_colors = scatter.get_facecolor()

        # Toggle visibility for scatter plot, line plot, and scatter residuals plot corresponding to the color
        for color in scatter_colors:
            if np.all(color[:3] == rgb_color[:3]):
                scatter_visible = scatter.get_visible()
                line_visible = line.get_visible()
                scatter_res_visible = scatter_res.get_visible()
                scatter.set_visible(not scatter_visible)
                line.set_visible(not line_visible)
                scatter_res.set_visible(not scatter_res_visible)
                if not scatter_visible:
                    line.set_data([], [])  # Remove the line by setting empty data
                else:
                    line.set_data(scatter.get_offsets().T)  # Restore the line

    plt.draw()  # Update the plot


def create_plots(ax1, ax2, xdata, ydata, fits, residuals, colors, filename):
    handles = PlotHandles()  # Create an instance of PlotHandles to store plot handles

    for i, color in enumerate(colors):
        scatter = ax1.scatter(xdata, ydata[:, i], c=color, s=10, label=f"{color}")
        (line,) = ax1.plot(
            xdata, fits[i], c=color
        )  # Store the line as a single element tuple
        scatter_res = ax2.scatter(
            xdata, residuals[i], c=color, s=7, label=f"{color} Residuals"
        )
        handles.handles.append(
            (scatter, line, scatter_res)
        )  # Add plot handles to the handles list

    ax1.set_ylabel("Light intensity in ADU's")
    ax1.set_title(f"Data and fits from {filename}")
    ax1.legend()
    ax1.grid(True)

    ax2.set_xlabel("Rotation in °")
    ax2.set_ylabel("Residuals")
    ax2.set_title("Residuals")
    ax2.grid(True)

    return handles  # Return the PlotHandles object


def plot_data(
    xdata, ydata, fits, error, residuals, rms, D, A, B, C, norm_rms, colors, filename
):
    # Create a figure with two subplots
    fig, (ax1, ax2) = plt.subplots(
        2, 1, figsize=(10, 8), gridspec_kw={"height_ratios": [3, 1]}, sharex=True
    )

    # Create the plots and store the handles in 'handles' variable
    handles = create_plots(ax1, ax2, xdata, ydata, fits, residuals, colors, filename)

    # Adjust the layout and show the plot without blocking the code execution
    plt.tight_layout()
    plt.show(block=False)

    # Create a new window to display results
    text_window = tk.Toplevel()
    text_window.title(f"Results for {filename}")
    text_window.geometry("700x100")

    # Create a frame to hold the text area
    text_frame = tk.Frame(text_window)
    text_frame.pack(side=tk.LEFT)

    # Create a scrolled text area to display results
    text_area = scrolledtext.ScrolledText(text_frame, width=70, height=5)
    text_area.pack()

    # Insert the column headers into the text area
    text_area.insert(tk.END, "Color\tPhase\tAmplitude\tPeriod\tRMS\tNorm RMS\tError\n")

    # Create a frame to hold the check buttons
    checkbuttons_frame = tk.Frame(text_window)
    checkbuttons_frame.pack(side=tk.RIGHT)

    checkbuttons = []
    for color, d, a, b, c, rm, nrm, err in zip(
        colors, D, A, B, C, rms, norm_rms, error
    ):
        rm = np.atleast_1d(rm)  # Convert rm to 1-D array
        nrm = np.atleast_1d(nrm)  # Convert nrm to 1-D array
        err = np.atleast_1d(err)  # Convert err to 1-D array

        # Insert the result values into the text area
        text_area.insert(
            tk.END,
            f"{color}\t{phase_dilemma(b[0], a[0])[0]:.6f}\t{phase_dilemma(b[0], a[0])[1]:.2f}\t{c[0]}\t{rm[0]:.2f}\t{nrm[0]:.2f}\t{err[len(a)+1]:.6f}\n",
        )

        var = tk.BooleanVar()
        # Create a check button for each color, linking it to the toggle_color function with the corresponding color and handles
        checkbutton = tk.Checkbutton(
            checkbuttons_frame,
            text=color,
            variable=var,
            onvalue=True,
            offvalue=False,
            command=lambda c=color, h=handles: toggle_color(c, h),
        )
        checkbutton.pack(anchor=tk.W)
        checkbuttons.append((checkbutton, var))

    def on_close():
        text_window.destroy()

    # Set the action to be performed when the window is closed
    text_window.protocol("WM_DELETE_WINDOW", on_close)

    # Enable point selection
    # mplcursors.cursor(hover=True)

    # Start the Tkinter event loop
    text_window.mainloop()


def phase_dilemma(phase, amplitude):
    if amplitude > 0:
        phase %= 360
        if phase > 180:
            phase -= 180

    if amplitude < 0:
        phase %= 360
        if phase > 180:
            phase = (phase + 90) % 360
        else:
            phase = (phase + 270) % 360

    return phase, abs(amplitude)


def main(filenames, A, B, C):
    for filename in filenames:
        dataset = load_data(filename)  # Load the dataset from the file
        colors = ["Red", "Green", "Blue"]

        xdata, ydata = dataset[0]  # Access the first element of the dataset list

        A_list = []
        B_list = []
        C_list = []
        d_list = []
        og_residuals_list = []
        fits = []
        error_list = []
        residuals_list = []
        rms_list = []
        norm_rms_list = []

        for i in range(ydata.shape[1]):
            # Fit dataset to sinus with 180° period
            d0, A0, B0, C0, og_res = fit_dataset0(xdata, ydata[:, i])
            # Use residuals from fit0 to fit harmonics
            A1, B1 = fit_dataset1(xdata, og_res, A, B, C)
            A2, B2, C2 = fit_dataset2(xdata, og_res, A1, B1, C)
            # Use fitted amplitude and phase as inputs to fit phase, periodicity, and amplitudes
            d3, A3, B3, C3, fit, error, res, rms = fit_dataset3(
                xdata, ydata[:, i], A2, B2, C2, d0, A0, B0, C0
            )

            A_list.append(A3)
            B_list.append(B3)
            C_list.append(C3)
            d_list.append(d3)
            fits.append(fit)

            error_list.append(error)
            residuals_list.append(res)
            rms_list.append(rms)

            og_residuals_list.append(og_res)

            # Calculate relative RMS
            amplitude = np.max(ydata[:, i]) - np.min(ydata[:, i])
            norm_rms = 1000 * rms / amplitude
            norm_rms_list.append(norm_rms)

        for i in range(len(colors)):
            np.set_printoptions(suppress=True)
            print(f"{colors[i]}:")
            print(f"y-Offset: {d_list[i]}")
            print(f"Amplitudes: {A_list[i]}")
            print(f"Phases: {B_list[i]}")
            print(f"Periods: {C_list[i]}")
            print(f"Errors: {error_list[i]}")
            print()

        # Plot the data

        plot_data(
            xdata,
            ydata,
            fits,
            error_list,
            residuals_list,
            rms_list,
            d_list,
            A_list,
            B_list,
            C_list,
            norm_rms_list,
            colors,
            filename,
        )

        plot_power_spectrum(xdata, ydata, residuals_list, colors, filename)
        colors = ["Red", "Green", "Blue"]


A = [20, 10, 1, 1.5]
B = [5, 40, 1, 1]
C = [112, 360, 60, 51]
# A = [20, 20, 11, 11, 2.65, 2.6, 2.1, -2]
# B = [1, 1, -0.6, 0.3, 1.35, -1, 1.5, 0.7]
# C = [120, 71.28, 6.20828, 5.80603, 3.05035, 2.95096, 2.022, 1.978]

# Files being analyzed
filenames = ["-3.txt"]

main(filenames, A, B, C)
