import numpy as np
from scipy.optimize import leastsq
import matplotlib.pyplot as plt
from matplotlib.widgets import CheckButtons, RadioButtons
import math 

def func(x, a, b, c, d):
    return a * np.sin((x + c)/180.0 *2*math.pi )+ d

def residuals(params, x, y):
    return y - func(x, *params)

def load_data(filename):
    data_file = open(filename, "r")
    lines = data_file.readlines()
    data_file.close()

    datasets = []
    i = 0
    while i < len(lines):
        if "switching colors" in lines[i]:
            i += 1
        else:
            data = []
            while i < len(lines) and "switching colors" not in lines[i]:
                line = lines[i].strip()
                if "," in line:
                    data.append(list(map(float, line.split(",")))[0:3])
                i += 1
            data = np.array(data)
            xdata = data[:, 0]
            ydata = data[:, 1]
            for j in range(len(xdata)):
                n = int(xdata[j] / 360)
                xdata[j] -= n * 360
            xdata, ydata = zip(*sorted(zip(xdata, ydata)))
            datasets.append((xdata, ydata))
    return datasets

def fit_dataset(dataset, p0):
    xdata, ydata = dataset
    params, _ = leastsq(residuals, p0, args=(xdata, ydata))
    res = residuals(params, xdata, ydata)
    rms = np.sqrt(np.mean(res**2))
    print(f"Parameters: {params}, RMS error: {rms}")
    return params, func(xdata, *params), res, ydata

def plot_datasets(datasets, fits, residuals, ydata_list, params):
    colors = ["r", "g", "b"]
    lines = []
    for i, dataset in enumerate(datasets):
        xdata, ydata = dataset
        line, = plt.plot(xdata, ydata_list[i], colors[i % len(colors)] + "o", label=f"Dataset {i + 1} Data")
        lines.append(line)
        line, = plt.plot(xdata, fits[i], colors[i % len(colors)] + "-", label=f"Dataset {i + 1} Fit")
        lines.append(line)
        line, = plt.plot(xdata, func(xdata, *params[i]), colors[i % len(colors)] + "--", label=f"Dataset {i + 1} Function")
        lines.append(line)
        line, = plt.plot(xdata, residuals[i], colors[i % len(colors)] + "o", label=f"Dataset {i + 1} Residuals")
        lines.append(line)
    plt.axhline(y=0, color='black', linestyle='-')
    plt.legend()
    return lines, 



# Define a function to update the plot when a check button is clicked
def update_plot(label, fig, lines, labels):
    index = labels.index(label)
    lines[index*4].set_visible(not lines[index*4].get_visible()) # data
    lines[index*4+1].set_visible(not lines[index*4+1].get_visible()) # fit
    lines[index*4+2].set_visible(not lines[index*4+2].get_visible()) # function
    lines[index*4+3].set_visible(not lines[index*4+3].get_visible()) # residuals
    fig.canvas.draw()

def main(filename, p0):
    # Load datasets from file
    datasets = load_data(filename)

    # Fit each dataset
    params_list = []
    fits = []
    residuals_list = []
    ydata_list = []
    for dataset in datasets:
        params, fit, res, ydata = fit_dataset(dataset, p0)
        params_list.append(params)
        fits.append(fit)
        residuals_list.append(res)
        ydata_list.append(ydata)
    
    fig, ax = plt.subplots()
    labels = [f"Dataset {i+1}" for i in range(len(datasets))]
    visibility = [True]*len(labels)
    check = CheckButtons(ax=ax, labels=labels, actives=visibility)

    # Plot datasets and fits
    labels = ["Red", "Green", "Blue"]
    lines = plot_datasets(datasets, fits, residuals_list, ydata_list, params_list)
    labels = [f"Dataset {i + 1}" for i in range(len(datasets))]
    # Define the check buttons
    check = CheckButtons(plt.axes([0.9, 0.5, 0.1, 0.1]), labels, [True] * len(labels))


    for label in check.labels:
        label.set_picker(True)
    check.on_clicked(update_plot)  # add update_plot as a function to call when checkbox is clicked
    check.on_clicked(update_plot(1, fig, lines, label))
    
    plt.show()

# Initial guess for the parameters
p0 = [7000, 180, 6, 7000]

main("Test 6b.txt", p0)






