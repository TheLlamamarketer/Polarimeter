import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import math
import tkinter as tk
from tkinter import scrolledtext, IntVar


def func(x, d, a0, a1, a2, a3, a4, a5, b0, b1, b2, b3, b4, b5):
    return (
        d
        + a0 * np.sin((x + b0) / 180 * 2 * math.pi)
        + a1 * np.sin((x + b1) / 6.207 * 2 * math.pi)
        + a2 * np.sin((x + b2) / 5.807 * 2 * math.pi)
        + a3 * np.sin((x + b3) / 71.428 * 2 * math.pi)
        + a4 * np.sin((x + b4) / 45.25 * 2 * math.pi)
        + a5 * np.sin((x + b5) / 60 * 2 * math.pi)
    )


def func2(x, d, a0, a1, a2, a3, a4, a5, b0, b1, b2, b3, b4, b5, c1, c2, c3, c4, c5):
    return (
        d
        + a0 * np.sin((x + b0) / 180 * 2 * math.pi)
        + a1 * np.sin((x + b1) / c1 * 2 * math.pi)
        + a2 * np.sin((x + b2) / c2 * 2 * math.pi)
        + a3 * np.sin((x + b3) / c3 * 2 * math.pi)
        + a4 * np.sin((x + b4) / c4 * 2 * math.pi)
        + a5 * np.sin((x + b5) / c5 * 2 * math.pi)
    )


def func0(x, d, a0, b0):
    return d + a0 * np.sin((x + b0) / 180 * 2 * math.pi)


def residuals(params, x, y):
    return y - func(x, *params)


def residuals2(params, x, y):
    return y - func2(x, *params)


def residuals0(params, x, y):
    return y - func0(x, *params)


def load_data(filename):
    with open(filename, "r") as data_file:
        lines = data_file.readlines()

    dataset = []
    data = []

    for line in lines:
        line = line.strip()
        if "," in line:
            row = list(map(float, line.split(",")))
            data.append(row)

    data = np.array(data)
    xdata = data[:, 0]
    ydata = data[:, 1:]

    xdata %= 360  # Ensure xdata stays within 360° range

    sorted_indices = np.argsort(xdata)
    xdata = xdata[sorted_indices]
    ydata = ydata[sorted_indices]

    dataset.append((xdata, ydata))  # Convert ydata to a NumPy array
    return dataset


def fit_dataset(xdata, ydata, p0):
    params, cov_matrix = curve_fit(func, xdata, ydata, p0=p0, maxfev=100000)
    res = residuals(params, xdata, ydata)
    rms = np.sqrt(np.mean(res**2))

    # Calculate parameter uncertainties from the covariance matrix
    param_errors = np.sqrt(np.diag(cov_matrix))

    return params, func(xdata, *params), param_errors, res, rms


def fit_dataset2(xdata, ydata, param):
    p0 = [6.21, 5.8, 71.5, 45, 60]
    p1 = np.concatenate((param, p0))
    params, cov_matrix = curve_fit(func2, xdata, ydata, p0=p1, maxfev=10000000)
    res = residuals2(params, xdata, ydata)
    rms = np.sqrt(np.mean(res**2))

    # Calculate parameter uncertainties from the covariance matrix
    param_errors = np.sqrt(np.diag(cov_matrix))

    return params, func2(xdata, *params), param_errors, res, rms


class PlotHandles:
    def __init__(self):
        self.handles = []


def toggle_color(color, handles):
    plot_handles = handles.handles

    rgb_color = mcolors.to_rgb(color)

    for scatter, line, scatter_res in plot_handles:
        scatter_colors = scatter.get_facecolor()
        scatter_res_colors = scatter_res.get_facecolor()

        # Toggle visibility for scatter plot, line plot, and scatter residuals plot corresponding to the color
        for scatter_color, scatter_res_color in zip(scatter_colors, scatter_res_colors):
            if np.all(scatter_color[:3] == rgb_color[:3]):
                scatter_visible = scatter.get_visible()
                line_visible = line.get_visible()
                scatter_res_visible = scatter_res.get_visible()
                scatter.set_visible(not scatter_visible)
                line.set_visible(not line_visible)
                scatter_res.set_visible(not scatter_res_visible)
                if not scatter_visible:
                    line.set_data([], [])  # Remove the line by setting empty data
                else:
                    line.set_data(scatter.get_offsets().T)  # Restore the line

    plt.draw()  # Update the plot


def create_plots(ax1, ax2, xdata, ydata, fits, residuals, colors, filename):
    handles = PlotHandles()

    lines = []
    scatter_res_list = []

    for i, color in enumerate(colors):
        scatter = ax1.scatter(xdata, ydata[:, i], c=color, s=10, label=f"{color}")
        (line,) = ax1.plot(
            xdata, fits[i], c=color
        )  # Store the line as a single element tuple
        scatter_res = ax2.scatter(
            xdata, residuals[i], c=color, s=7, label=f"{color} Residuals"
        )
        scatter.set_visible(True)
        line.set_visible(True)
        scatter_res.set_visible(True)

        handles.handles.append((scatter, line, scatter_res))
        lines.append(line)
        scatter_res_list.append(scatter_res)

    ax1.set_ylabel("Light intensity in ADU's")
    ax1.set_title(f"Data and fits from {filename}")
    ax1.legend()
    ax1.grid(True)

    ax2.set_xlabel("Rotation in °")
    ax2.set_ylabel("Residuals")
    ax2.set_title("Residuals")
    ax2.grid(True)

    return handles, lines, scatter_res_list


def plot_data(
    xdata, ydata, fits, error, residuals, rms, params, norm_rms, colors, filename
):
    fig, (ax1, ax2) = plt.subplots(
        2, 1, figsize=(10, 8), gridspec_kw={"height_ratios": [3, 1]}, sharex=True
    )

    handles, lines, scatter_res_list = create_plots(
        ax1, ax2, xdata, ydata, fits, residuals, colors, filename
    )

    plt.tight_layout()
    plt.show(block=False)

    text_window = tk.Toplevel()
    text_window.title("Results")
    text_window.geometry("500x100")

    text_frame = tk.Frame(text_window)
    text_frame.pack(side=tk.LEFT)

    text_area = scrolledtext.ScrolledText(text_frame, width=50, height=5)
    text_area.pack()

    text_area.insert(tk.END, "Color\tPhase\tAmplitude\tRMS\tNorm RMS\tError\n")

    checkbuttons_frame = tk.Frame(text_window)
    checkbuttons_frame.pack(side=tk.RIGHT)

    checkbuttons = []
    for color, par, rm, nrm, err in zip(colors, params, rms, norm_rms, error):
        rm = np.atleast_1d(rm)  # Convert rm to 1-D array
        nrm = np.atleast_1d(nrm)  # Convert nrm to 1-D array
        err = np.atleast_1d(err)  # Convert err to 1-D array

        text_area.insert(
            tk.END,
            f"{color}\t{phase_dilemma(par[7], par[1])[0]:.6f}\t{phase_dilemma(par[7], par[1])[1]:.2f}\t{rm[0]:.2f}\t{nrm[0]:.2f}\t{err[7]:.6f}\n",
        )

        var = tk.BooleanVar()
        checkbutton = tk.Checkbutton(
            checkbuttons_frame,
            text=color,
            variable=var,
            onvalue=True,
            offvalue=False,
            command=lambda c=color, h=handles: toggle_color(c, h),
        )
        checkbutton.pack(anchor=tk.W)
        checkbuttons.append((checkbutton, var))

    def on_close():
        text_window.destroy()

    text_window.protocol("WM_DELETE_WINDOW", on_close)

    text_window.mainloop()


def phase_dilemma(phase, amplitude):
    if amplitude > 0:
        phase %= 360
        if phase > 180:
            phase -= 180

    if amplitude < 0:
        phase %= 360
        if phase > 180:
            phase = (phase + 90) % 360
        else:
            phase = (phase + 270) % 360

    return phase, abs(amplitude)


def main(filenames, p0):
    for filename in filenames:
        dataset = load_data(filename)  # Load the dataset from the file
        colors = ["Red", "Green", "Blue"]

        xdata, ydata = dataset[0]  # Access the first element of the dataset list

        params_list = []
        fits = []
        residuals_list = []
        error_list = []
        rms_list = []
        norm_rms_list = []

        for i in range(ydata.shape[1]):
            params, fit, error, res, rms = fit_dataset(xdata, ydata[:, i], p0)
            params, fit, error, res, rms = fit_dataset2(xdata, ydata[:, i], params)
            params_list.append(params)
            fits.append(fit)
            error_list.append(error)
            residuals_list.append(res)
            rms_list.append(rms)

            # Calculate relative RMS
            amplitude = np.max(ydata[:, i]) - np.min(ydata[:, i])
            norm_rms = 1000 * rms / amplitude
            norm_rms_list.append(norm_rms)

        # Plot the data
        plot_data(
            xdata,
            ydata,
            fits,
            error_list,
            residuals_list,
            rms_list,
            params_list,
            norm_rms_list,
            colors,
            filename,
        )


p0 = [1200, 1127, 10, 10, 2, 1.5, 1, 1, 0, 0, 1, 0.5, 0.8]

# Files being analyzed
filenames = ["3-15e.txt", "3-15ee.txt", "3-15eee.txt", "3-15eeee.txt"]

main(filenames, p0)
